┌────┬───────────────────────┬───────────────────────────────────────────────┬-----------------------------┬--------┬-----------------------------┬--------------------------┬-----------------------------┐
│ #  │ Algorithm             │ Catchy Idea 🧠 (Crystal Clear)                │ Time (Best / Avg / Worst)   │ Space  │ When to Use ✅               │ When NOT to Use ❌        │ Real-World Example 🌍        │
├────┼───────────────────────┼───────────────────────────────────────────────┼-----------------------------┼--------┼-----------------------------┼--------------------------┼-----------------------------┤
│  1 │ Merge Sort ⭐          │ Divide array → sort halves → merge            │ O(n log n) / O(n log n) /   │ O(n)   │ Stable, linked lists, large │ Memory limited            │ Databases, external sort     │
│    │                       │                                               │ O(n log n)                  │        │ data                        │                          │                             │
│  2 │ Quick Sort ⭐          │ Choose pivot → partition → recurse            │ O(n log n) / O(n log n) /   │ O(log n)│ General sorting, cache-     │ Worst-case if bad pivot   │ System libraries             │
│    │                       │                                               │ O(n²)                       │        │ friendly                    │                          │                             │
│  3 │ Heap Sort ⭐           │ Build max-heap → extract max one by one       │ O(n log n) / O(n log n) /   │ O(1)   │ Space critical, priority-   │ Stability required        │ Job scheduling               │
│    │                       │                                               │ O(n log n)                  │        │ based                       │                          │                             │
│  4 │ Counting Sort ⭐       │ Count frequencies → place elements in order   │ O(n+k) / O(n+k) / O(n+k)    │ O(k)   │ Small integer range         │ Large range               │ Votes, ranks                 │
│  5 │ Radix Sort ⭐          │ Sort by digits from LSD/MSD                   │ O(nk)                       │ O(n+k) │ Integers, fixed length      │ Complex objects           │ Phone numbers                │
│  6 │ Bucket Sort ⭐         │ Scatter into buckets → sort inside → merge    │ O(n+k) / O(n²)              │ O(n+k) │ Uniform distribution        │ Skewed data               │ Hashing                      │
│  7 │ Topological Sort ⭐    │ Order vertices in DAG with dependencies       │ O(V+E)                      │ O(V+E) │ Scheduling                  │ Cyclic graphs             │ Build order, tasks           │
│  8 │ Tim Sort ⭐            │ Merge + Insertion hybrid, detects runs        │ O(n) / O(n log n) /         │ O(n)   │ Real-world data, stable     │ Memory use                │ Python, Java                 │
│    │                       │                                               │ O(n log n)                  │        │                             │                          │                             │
│  9 │ Intro Sort ⭐          │ QuickSort with Heap fallback                  │ O(n log n)                  │ O(log n)│ General-purpose             │ Slightly complex          │ C++ STL sort                 │
│ 10 │ Insertion Sort ⭐      │ Take elements & insert into sorted left side  │ O(n) / O(n²) / O(n²)        │ O(1)   │ Nearly sorted, small inputs │ Large random data         │ Card games                   │
│    │                       │ (like cards)                                  │                             │        │                             │                          │                             │
│ 11 │ Selection Sort ⭐      │ Repeatedly pick the smallest and put in place │ O(n²) / O(n²) / O(n²)       │ O(1)   │ Memory tight, small arrays  │ Large data                │ Tournament selection         │
│ 12 │ Bubble Sort ⭐         │ Compare neighbors & keep swapping until sorted│ O(n) / O(n²) / O(n²)        │ O(1)   │ Teaching basics, tiny arrays│ Large datasets            │ Simple demos                 │
└────┴───────────────────────┴───────────────────────────────────────────────┴-----------------------------┴--------┴-----------------------------┴--------------------------┴-----------------------------┘

⚪ Other Sorting Algorithms (Good to Know but Less Important)
┌────┬───────────────────────┬───────────────────────────────────────────────┬-----------------------------┬--------┬-----------------------------┬--------------------------┬-----------------------------┐
│ #  │ Algorithm             │ Catchy Idea 🧠                               │ Time (Best / Avg / Worst)   │ Space  │ When to Use ✅               │ When NOT to Use ❌        │ Real-World Example 🌍        │
├────┼───────────────────────┼───────────────────────────────────────────────┼-----------------------------┼--------┼-----------------------------┼--------------------------┼-----------------------------┤
│ 13 │ Shell Sort            │ Insertion sort with gaps → reduce inversions │ O(n log n) / O(n^1.25) /    │ O(1)   │ Medium arrays               │ Rare now                 │ Early OS sorting             │
│    │                       │                                               │ O(n²)                       │        │                             │                          │                             │
│ 14 │ Tree Sort             │ Insert into BST → inorder traversal          │ O(n log n) / O(n log n) /   │ O(n)   │ If BST exists               │ Poor if unbalanced        │ Database indexing            │
│    │                       │                                               │ O(n²)                       │        │                             │                          │                             │
│ 15 │ Cocktail Shaker Sort  │ Bubble sort both directions                  │ O(n) / O(n²) / O(n²)        │ O(1)   │ Slightly optimized bubble   │ Large data                │ Teaching                     │
│ 16 │ Comb Sort             │ Bubble sort but with shrinking gap swaps     │ O(n log n) / ~O(n²)         │ O(1)   │ Faster bubble sort          │ Rarely used               │ Experimental                 │
│ 17 │ Gnome Sort            │ Swap like insertion but backtrack on disorder│ O(n) / O(n²) / O(n²)        │ O(1)   │ Simple code                 │ Inefficient               │ Teaching basics              │
│ 18 │ Odd–Even Sort         │ Bubble sort on odd/even pairs in parallel    │ O(n) / O(n²) / O(n²)        │ O(1)   │ Parallel systems            │ Sequential CPUs           │ Parallel processors          │
│ 19 │ Cycle Sort            │ Place each element in its correct cycle pos. │ O(n²)                       │ O(1)   │ Minimize writes             │ Time costly               │ Flash memory                 │
│ 20 │ Strand Sort           │ Extract sorted subsequences (strands)        │ O(n log n) / O(n²)          │ O(n)   │ Linked lists                │ Arrays, big n             │ Academic                     │
│ 21 │ Bitonic Sort          │ Build bitonic seq → merge with compare-exch. │ O(n log²n)                  │ O(1)   │ Parallel/GPU sorting        │ Normal CPU                │ Hardware sort                │
│ 22 │ Patience Sort         │ Deal cards into piles like patience game     │ O(n log n)                  │ O(n)   │ LIS problems                │ Not for general sorting   │ LIS problems                 │
│ 23 │ Pancake Sort          │ Flip prefix until largest pancake on top     │ O(n²)                       │ O(1)   │ Puzzle problem              │ Real data                 │ Fun algorithm                │
│ 24 │ Pigeonhole Sort       │ Place elements into holes (like pigeon boxes)│ O(n+range)                   │ O(range)│ Range ≈ n                  │ Large range               │ Integers                     │
│ 25 │ External Sorting      │ Divide data into chunks → merge on disk      │ O(n log n)                  │ O(1)/O(n)│ Huge data not in RAM       │ Small datasets            │ Databases, Big Data          │
│ 26 │ Bogo Sort             │ Shuffle until sorted (😂)                    │ — / — / O(∞)                │ O(1)   │ Joke                        │ Anything real             │ Meme                         │
│ 27 │ Sleep Sort            │ Each number waits = value seconds            │ —                            │ O(n)   │ Fun demo                    │ Real world                │                              │
└────┴───────────────────────┴───────────────────────────────────────────────┴-----------------------------┴--------┴-----------------------------┴--------------------------┴-----------------------------┘